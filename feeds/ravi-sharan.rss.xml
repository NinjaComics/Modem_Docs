<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Ravi Sharan's /radio/bin/io</title><link>http://ninjacomics.github.io/radioblogr/</link><description></description><lastBuildDate>Mon, 22 Aug 2016 20:50:00 +0530</lastBuildDate><item><title>[GSoC] Summary, Final Submission, Future Work</title><link>http://ninjacomics.github.io/radioblogr/2016/08/gsoc_final_eval.html</link><description>&lt;img alt="" src="images/gsoc_banner.png" /&gt;
&lt;p&gt;This summer I was very fortunate to work on GNU Radio's installer - Pybombs,
with my mentors Martin Braun and Nathan West, as a part of GSoC '16. I have
worked on several features like developing a PyQt5 based GUI for Pybombs
installer, improve CGRAN website and add some cool features to improve the
overall user experience while using the installer and the CGRAN site. This log
marks the last of the entries under the GSoC tags. Read along to know more
about my contributions during the GSoC program.&lt;/p&gt;
&lt;div class="section" id="pybombs-qtgui-design-and-development"&gt;
&lt;h2&gt;PyBOMBS-QTGUI - Design and Development:&lt;/h2&gt;
&lt;img alt="" src="images/pybombsgui.png" /&gt;
&lt;p&gt;Developing a GUI frontend for GNU Radio's installer - Pybombs was the first
deliverable of my GSoC proposal. One of the prime goals I had in mind while
designing the GUI was to keep it as simple as possible. During the design
phase, I have inspected several existing package manager GUIs. PyBOMBS-QtGUI's
design is inspired from two such package manager frontends - Synaptic and Pamac.
While keeping the application's usage as simple as possible, I have added a few
graphics to make it more visually asthetic. Few key features of Pybombs-QtGUI:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Recipes are loaded from the active prefix.&lt;/li&gt;
&lt;li&gt;Separate Prefix manager and Recipe manager dialogs.&lt;/li&gt;
&lt;li&gt;A dialog to add new recipe to the active prefix.&lt;/li&gt;
&lt;li&gt;The application consumes a few KBs of memory when installed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A link to few screenshots and a screencast featuring PyBOMBS-QtGUI can be found
in the futher sections of this article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cgran-new-look-and-integration-with-pybombs"&gt;
&lt;h2&gt;CGRAN - new look and integration with PyBOMBS:&lt;/h2&gt;
&lt;img alt="" src="images/new_cgran.png" /&gt;
&lt;p&gt;In the final month of the coding period, I have worked on making CGRAN site look
similar to the new GNU Radio site. Along with the apperance of the front page,
I have added a few features like tag highligting and fixed few minor issues of
the site. The module pages now features a &amp;quot;Install from CGRAN&amp;quot; button to install
individual OOT Modules directly from the CGRAN site. These modules are installed
to the default prefix, if Pybombs is already installed on the host PC.&lt;/p&gt;
&lt;p&gt;Apart from adding new look to CGRAN, I have also worked on PybombsUrl - a host
side python package which handles the Pybombs' URLs and allows to install modules
directly from the CGRAN site.&lt;/p&gt;
&lt;p&gt;PybombsUrl works in two modes - Terminal and the GUI mode. If the host side PC
has PybombsGUI installed, a GUI window is presented to the user to install the
desired packages from CGRAN. If the package is unable to detect the presence of
PybombsGUI, it switches back to the terminal mode and the packages are installed
from the default-terminal of the Desktop Environment. Few key features of this
deliverable are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CGRAN site is designed to blend in with the new &lt;a class="reference external" href="gnuradio.org"&gt;gnuradio&lt;/a&gt; site&lt;/li&gt;
&lt;li&gt;OOT Modules can be installed from the CGRAN website using PybombsUrl&lt;/li&gt;
&lt;li&gt;Pybombsurl uses a custom protocol to handle the install from CGRAN feature&lt;/li&gt;
&lt;li&gt;On the client side, the pybombsurl python package handles the pybombs' URLs&lt;/li&gt;
&lt;li&gt;Packages can either be installed from GUI or from terminal, depending upon
the availability of the GUI package&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A link to few screenshots of PybombsUrl and CGRAN are provided in the next
section of this article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="links-and-urls-to-repositories-prs-and-screenshots"&gt;
&lt;h2&gt;Links and URLs to Repositories, PRs and Screenshots:&lt;/h2&gt;
&lt;div class="section" id="pybombsgui-and-pybombsurl-gitlab-repos"&gt;
&lt;h3&gt;PybombsGUI and PybombsUrl Gitlab Repos:&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gitlab.com/NinjaComics/pybombs-qtgui"&gt;PybombsGUI Gitlab Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gitlab.com/NinjaComics/pybombsurl"&gt;PybombsUrl Gitlab Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="list-of-commits-and-pull-requests"&gt;
&lt;h3&gt;List of commits and Pull requests:&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gitlab.com/NinjaComics/pybombs-qtgui/commits/master"&gt;List of commits for PybombsGUI&lt;/a&gt;  Complete commit history of the package&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gitlab.com/NinjaComics/pybombsurl/commits/master"&gt;List of commits for PybombsUrl&lt;/a&gt;  Complete commit history of the package&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gnuradio/pybombs/pull/356/commits"&gt;Pull request 1 to Pybombs&lt;/a&gt; This PR addresses the &lt;a class="reference external" href="https://github.com/gnuradio/pybombs/issues/348"&gt;issue #348&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gnuradio/pybombs/pull/367/commits"&gt;Pull request 2 to Pybombs&lt;/a&gt; This PR includes fix to &lt;a class="reference external" href="https://github.com/gnuradio/pybombs/issues/363"&gt;issue #363&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/gnuradio/pybombs/issues/369"&gt;issue #369&lt;/a&gt;. Along with that recipe files are added for PybombsUrl and PybombsGUI&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gnuradio/gr-recipes/pull/42/commits"&gt;Pull request to gr-recipes&lt;/a&gt; Adds documentation to reflect in PybombsGUI&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gnuradio/gr-etcetera/pull/14/commits"&gt;Pull request to gr-etcetera&lt;/a&gt; Adds documentation to reflect in PybombsGUI&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/n-west/cgran.org/pull/2/commits"&gt;Pull request to cgran.org&lt;/a&gt; Reflects new design changes, custom protocol handler for pybombs' URLs along with few fixes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pybombsgui-and-pybombsurl-pypi-packges"&gt;
&lt;h3&gt;PybombsGUI and PybombsUrl PyPI packges:&lt;/h3&gt;
&lt;p&gt;Both PybombsGUI and PybombsUrl are available on PyPI as pre-developer release
packages and they can be found at:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi?%3Aaction=pkg_edit&amp;amp;name=PyBOMBS-QtGUI"&gt;PybombsGUI PyPI package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi?%3Aaction=pkg_edit&amp;amp;name=PybombsUrl"&gt;PybombsUrl PyPI package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="scrrenshots-and-screencast-of-a-working-pybombsgui"&gt;
&lt;h3&gt;Scrrenshots and screencast of a working PybombsGUI:&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://youtu.be/LJ_610wAsLk"&gt;PybombsGUI screencast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://drive.google.com/drive/folders/0By6XhrfIWygqaU05ajVGVzREMU0?usp=sharing"&gt;PybombsGUI screenshots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-learning-curve"&gt;
&lt;h2&gt;The Learning Curve:&lt;/h2&gt;
&lt;div class="section" id="pyqt5"&gt;
&lt;h3&gt;PyQt5:&lt;/h3&gt;
&lt;p&gt;For most part of the coding period, I have learnt a lot on how to develop GUI
applications using the PyQt5 libraries. Although I had no prior experience
developin GUI applications, I have enjoyed every bit of designing and developing
the PybombsGUI. During the process, I have learned a lot on how to sepearate the
GUI and code for smooth user experience and multithreading using the QThread
libraries. During the design phase, I have tried to add a flavor of orange to
the application wherever necessary, to bring the feel and look of GNU Radio project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pybombsurl"&gt;
&lt;h3&gt;PybombsUrl:&lt;/h3&gt;
&lt;p&gt;I spent some valuable amount of time researching on how to interface a website
with the client side Desktop environment. To enable the PybombsUrl feature, I
have created a custom protocol/URL handlers and learned a bit more about the
internals of custom protocol/URL handlers. A plus side of all this, I have improved
a lot on my coding skills during the program&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="community-bonding-and-help"&gt;
&lt;h3&gt;Community bonding and help:&lt;/h3&gt;
&lt;p&gt;While writing the proposal, I have assumed the development of the Qt app to be
on the easy side, but I had a few challenges in understanding the working mechanism
of the Qt libraries during and after the mid-term evaluation period.
During the development phase of the app, I have spent quite some time lurking on
the pyqt and qt irc channels and have pestered the mods with a lot of questions
on the working of Qt apps. Thanks to the PyQt IRC members for the help. Along
with the communication on IRC, I have interacted with few GNU Radio community
members on the mailing list to update the progress during the coding period.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="future-work"&gt;
&lt;h2&gt;Future Work:&lt;/h2&gt;
&lt;p&gt;Both PybombsGUI and PybombsUrl are now available as pre-developer and alpha
release packages respectively. I am definitely looking forward to add more
features to these projects and see if there can be any improvement to be done
on the CGRAN side. Even after GSoC, I plan on supporting the CGRAN and Pybombs'
tools. Few areas I am looking forward to work on before the release of the
packages are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Add more documentation to the module pages, to make it a one stop shop
information source on 3rd party OOT Modules.&lt;/li&gt;
&lt;li&gt;Provide a mirror repository of all the 3rd party OOT Modules which can serve
CGRAN and PyBombs at the same time.&lt;/li&gt;
&lt;li&gt;Propoer handling of QThread functionality in the Pybombsgui.&lt;/li&gt;
&lt;li&gt;A more realistic progress bar implementation in the Pybombsgui.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="acknowledgements-and-working-with-mentor"&gt;
&lt;h2&gt;Acknowledgements and Working with Mentor:&lt;/h2&gt;
&lt;p&gt;Finally, I am thankful to my mentors Martin Braun and Nathan West, for providing
me an opportunity to contribute to the GNU Radio community as a part of GSoC program.
Martin Braun's weekly calls have really helped me in decision making throughout
the  program. I look forward to contribute more to the GNU Radio community in coming days.&lt;/p&gt;
&lt;p&gt;For now, pip-pip ! Here's a &lt;a class="reference external" href="https://c.xkcd.com/random/comic/"&gt;random xkcd cartoon strip&lt;/a&gt; :)&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ravi Sharan</dc:creator><pubDate>Mon, 22 Aug 2016 20:50:00 +0530</pubDate><guid isPermaLink="false">tag:ninjacomics.github.io,2016-08-22:radioblogr/2016/08/gsoc_final_eval.html</guid><category>gsoc</category><category>final evaluation</category><category>coding period</category></item><item><title>[GSoC] Weekly Update</title><link>http://ninjacomics.github.io/radioblogr/2016/08/gsoc_cgran_progress.html</link><description>&lt;p&gt;This log is a condensed report about my GSoC progress for the past two weeks.
Quick update is, pybombs-gui is now on PyPi as a pre-release package. On the
other hand, I am working on the &amp;quot;Install from CGRAN&amp;quot;, which is a part of my
proposal. Read along for more updates.&lt;/p&gt;
&lt;div class="section" id="pybombs-on-pypi-and-cgran-fixes"&gt;
&lt;h2&gt;Pybombs on PyPi and CGRAN Fixes&lt;/h2&gt;
&lt;p&gt;As mentioned above, I have pushed the pybombs-gui package as a pre-release package
on PyPi. I am looking forward to release the GUI at the end of my GSoC, along
with few bug fixes to the Pybombs-cli. There are a few things left before I can
push the code for a full release. The idea is to make pybombs-gui installable
from pybombs-cli. The recipe takes care of the PyQt5 dependencies and the
gui-package is installable using Pip. Also I am working on a new icon for the
gui - expect for more orange flavor. Maybe ?&lt;/p&gt;
&lt;p&gt;On the CGRAN part, I am working on an idea similar to AptUrl, to install/prompt
for package installation, from the CGRAN website. If the site is accessed on a
Linux distro with Gnome or KDE, the default terminal emulator is invoked and
pybombs will try to install package from website in the default prefix. If pybombs
is not installed, the user is displayed an &amp;quot;Unable to install message&amp;quot; (obviously).&lt;/p&gt;
&lt;p&gt;GSoC is about to end in another 15-18 days time and I am planning to finish off
the tasks as quickly as possible. Hopefully, by the end of the GSoC period, we
will have a new pybombs-gui and new features for CGRAN website. That makes it
a short update. For now, pip-pip !&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ravi Sharan</dc:creator><pubDate>Fri, 05 Aug 2016 20:50:00 +0530</pubDate><guid isPermaLink="false">tag:ninjacomics.github.io,2016-08-05:radioblogr/2016/08/gsoc_cgran_progress.html</guid><category>gsoc</category><category>weekly progress</category><category>coding period</category></item><item><title>[GSoC] Pybombs and more - Weekly Update</title><link>http://ninjacomics.github.io/radioblogr/2016/07/gsoc_pybombs_progress.html</link><description>&lt;p&gt;In the last week, I have worked on two things - main one being Pybombs GUI and
a bit on addressing the pybombs' support for airgapped systems. Read along to know
the updates on &lt;a class="reference external" href="https://www.gitlab.com/NinjaComics/pybombs-qtgui"&gt;pybombs-qtgui&lt;/a&gt; and the idea for this pybombs &lt;a class="reference external" href="https://github.com/gnuradio/pybombs/issues/236"&gt;issue&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="pybombs-final-touches"&gt;
&lt;h2&gt;Pybombs - final touches&lt;/h2&gt;
&lt;p&gt;Like I mentioned in my last week's update, I have added a dialog to collect the
logs generated by pybombs-qtgui and the &lt;a class="reference external" href="https://github.com/gnuradio/pybombs"&gt;pybombs-cli&lt;/a&gt; running as the backend.
Another problem I worked on is to deal with the mutliprocess functionality introduced
in pybombs-gui to make the user experience smooth while browsing the apps on app-store.
Earlier, I had pushed a part of the GUI stuff to a non-main thread and that created
few issues while running the app - newbie mistakes ! It took some good amount of
time to figure out the problem and fix it. The app now works smooth (no warnings
or Qt complaints from the non-main thread).&lt;/p&gt;
&lt;p&gt;Another problem I faced(wroked on) this week is the use of &lt;a class="reference external" href="https://www.freedesktop.org/software/polkit/docs/0.105/pkexec.1.html"&gt;pkexec&lt;/a&gt; with pybombs
app store. If pybombs were just a GUI for one package manager, a single policy
file will do the trick. But pybombs is a wrapper around the multiple package managers
that are native to the operating system, example: pip, pacman, dnf/yum etc.,&lt;/p&gt;
&lt;p&gt;Here's the tricky part, even when we add a policy file to each of the package
managers native to the distro, pybombs may call a native package manager and pip
to build a system wide package and a pypi package consequetively. Due to pkexec's
nice security feature, user is prompted with a authentication agent a lot of times
depending on the package managers invoked. I am currently working on this and
this is the only issue to be addressed before releasing the app store.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gnu-radio-oot-module-mirror-repos"&gt;
&lt;h2&gt;GNU Radio OOT Module mirror repos&lt;/h2&gt;
&lt;p&gt;What happens when you host a GNU Radio hackathon, where you are supposed to provide
GNU Radio and the OOT Modules but have limited internet access ? That's just one
simple scenario where an end user has little or no access to internet.&lt;/p&gt;
&lt;p&gt;One solution is to maintain a mirror of GNU Radio and all the OOT Modules on a
central location and which can be easily accessible by the airgapped systems as
well. Gitlab has a nice feature of hosting mirror repositories and updates the
repo once in an hour. The idea is similar to maintaining vim scripts mirror repo
where a user can clone the complete set of modules with a single command or select
those repos which will fit the need. This idea also addresses the archiving problem
for current CGRAN website. The CGRAN site can update the information available from
the mirror repos.&lt;/p&gt;
&lt;p&gt;Similar projects that I have come across in similar lines are GDG Suzhou's
&lt;a class="reference external" href="https://github.com/renfeng/android-repository"&gt;android-repository&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/vim-scripts"&gt;vim scripts&lt;/a&gt; and a recent activity on GNU Radio &lt;a class="reference external" href="https://lists.gnu.org/archive/html/discuss-gnuradio/2016-06/msg00162.html"&gt;mailing list&lt;/a&gt;.
I will update more on this idea in next week's progress report. That's the update for now,
Pip pip ! If you followed this post till here, enjoy this random &lt;a class="reference external" href="https://c.xkcd.com/random/comic/"&gt;xkcd comic strip&lt;/a&gt; !&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ravi Sharan</dc:creator><pubDate>Fri, 22 Jul 2016 20:50:00 +0530</pubDate><guid isPermaLink="false">tag:ninjacomics.github.io,2016-07-22:radioblogr/2016/07/gsoc_pybombs_progress.html</guid><category>gsoc</category><category>weekly progress</category><category>coding period</category></item><item><title>[GSoC] Pybombs GUI - Weekly Update</title><link>http://ninjacomics.github.io/radioblogr/2016/07/gsoc_weekly_report.html</link><description>&lt;p&gt;This week I worked on refining the UI and getting things ready for the release.
One more thing I have worked on this week is separating the GUI and the time
consuming features that power up the GUI, like generating data and installing
packages etc., using Qt framework's QThread functionality. The app now doesn't
lose focus while installing/updating/removing packages or generating data or
while adding recipes from a remote URL. Read along to know more bombs, pybombs !&lt;/p&gt;
&lt;div class="section" id="to-sudo-or-to-pkexec"&gt;
&lt;h2&gt;To SUDO or to pkexec:&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/gnuradio/pybombs"&gt;pybombs-cli&lt;/a&gt; uses sudo for authentication, like I mentioned in my previous week's
update. The advantage of sudo or the sudo based GUI frontends is that one doesn't
have to authenticate for a certain time period (that's 5 minutes to be precise).
Disadvantage is that these sudo based GUI frontends may or may not be available on
all distros and we might have to add another dependency just for granting elevated
privileges.
Another alternative is to use &lt;a class="reference external" href="https://www.freedesktop.org/software/polkit/docs/0.105/pkexec.1.html"&gt;pkexec&lt;/a&gt;, an authentication mechanism based on polkit.
The good part about pkexec is, it is available on all distros by default and uses
an authentication agent that is native to the distro - meaning no dependencies.
But, like I mentioned in this &lt;a class="reference external" href="https://github.com/gnuradio/pybombs/issues/369"&gt;issue&lt;/a&gt;, depending on the policies available,
and given the fact that pybombs packs different native package managers, one
might have to authenticate for elevated privileges every time a different package
manager requests for elevated privileges, while performing tasks with pybombs.
This can be overcome by using policies for different package managers while using
pybombs in GUI mode and using using sudo as the authentication agent while running
pybombs in cli mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="collecting-and-displaying-logs"&gt;
&lt;h2&gt;Collecting and displaying logs:&lt;/h2&gt;
&lt;p&gt;Providing information on what went wrong(or right), while performing a task
using GUI makes it more easy to use. The pybombs-cli uses python's logging module
to display information on what's happening while pybombs is running. The idea is
to route this information to the GUI while performing the install/update/remove
tasks or while creating a prefix for example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="release-and-moving-onto-next-deliverable"&gt;
&lt;h2&gt;Release and Moving onto next deliverable:&lt;/h2&gt;
&lt;p&gt;Finally, I am looking forward to release a usable GUI frontend for pybombs,
by mid next week. I am testing the GUI on different distros and so far I like how
the GUI looks all nice on Fedora 23 and 24. The app inherits the GTK style so well
on Fedora. The progress can be tracked at &lt;a class="reference external" href="https://www.gitlab.com/NinjaComics/pybombs-qtgui"&gt;gitlab&lt;/a&gt; repo.
Apart from working on pybombs-gui, I have also started working
a bit on the CGRAN site, which happens to be my next deliverable. For now,
Pip pip ! If you followed this post till here, enjoy this random &lt;a class="reference external" href="https://c.xkcd.com/random/comic/"&gt;xkcd comic strip&lt;/a&gt; !&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ravi Sharan</dc:creator><pubDate>Fri, 15 Jul 2016 20:50:00 +0530</pubDate><guid isPermaLink="false">tag:ninjacomics.github.io,2016-07-15:radioblogr/2016/07/gsoc_weekly_report.html</guid><category>gsoc</category><category>weekly progress</category><category>coding period</category></item><item><title>[GSoC] Pybombs GUI - Condensed progress for past four weeks</title><link>http://ninjacomics.github.io/radioblogr/2016/07/gsoc_condensed_report.html</link><description>&lt;p&gt;I am updating this blog almost after a month. This is a condensed report on my
GSoC progress so far. The progress has been really slow but on the brighter side,
I have made a good amount of changes to the design.&lt;/p&gt;
&lt;p&gt;The gui displays the application, baseline and prefix specific/sdk packages
in two separate pages. Apart from displaying the list of packages, there is a
recipe manager and a prefix manager to handle the prefixes and recipes in a proper
way. Read along for more information on the design.&lt;/p&gt;
&lt;div class="section" id="prefix-manager"&gt;
&lt;h2&gt;Prefix Manager:&lt;/h2&gt;
&lt;p&gt;Prefix management in the pybombs-gui is split into two parts. One is the prefix
config dialog and the other is a prefix chooser. The prefix config dialog works
like the &lt;code&gt;pybombs prefix init&lt;/code&gt; command. Bonus, you can even add a virtualenv
to the prefix by just ticking a checkbox, while creating it - just like
&lt;a class="reference external" href="https://github.com/gnuradio/pybombs"&gt;pybombs-cli&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The prefix chooser does what it says - choose a prefix from the list of available
prefixes and load the respective recipes. The idea here is to present the
user with those packages that are specific to the prefix, rather than displaying
recipes from all the recipe repositories. Currently, the tableview is posing a bit
of a problem by not refreshing the content after choosing a prefix. Fixing this is
the top priority now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recipe-manager"&gt;
&lt;h2&gt;Recipe Manager:&lt;/h2&gt;
&lt;p&gt;The recipe manager dialog displays a list of recipe aliases, the source and the
directory in which those recipes reside. By default, pybombs ships with basic
recipes required to run it in a minimal mode. One can add the other recipes
similar to the &lt;code&gt;pybombs recipes add &amp;lt;recipe-alias&amp;gt; &amp;lt;recipe-repo uri&amp;gt;&lt;/code&gt; command.
Again, functionality is similar to what you see with the pybombs-cli.&lt;/p&gt;
&lt;p&gt;When pybombs-gui is launched, it checks for the existing prefixes and if it
doesn't find any suitable prefix or recipes to load, the prefix config dialog
followed by a recipe manager dialog are presented to the user and the main window
is displayed only when the user has created a prefix and added the recipes. If
the default prefix is present, the main window loads those recipes specific to
that prefix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="main-window"&gt;
&lt;h2&gt;Main Window:&lt;/h2&gt;
&lt;p&gt;The main window displays the prefix specific recipes, baseline packages and the
sdk packages (if any) separately as stated above. A package can be selected by
right clicking the row it is present and based on the package's status(install/
update/remove), a context menu is provided to the user to choose from. Apart
from the status of the package, the module info also can be viewed on a per
package basis. One thing that I am not really sure about adding to this context menu
is the package flags - forcebuild from source and forcedinstall flags. Just a small
addition - Can be done !
Once the user is happy with the selected packages, applying changes will automatically
take care of installing, updating and removing the packages in a sequential manner
(can turn out to be a time consuming process).&lt;/p&gt;
&lt;p&gt;Apart from the abovementioned dialogs, there is a running config dialog which displays
the current local and global config. And there's also a new recipe dialog which helps
to create a recipe from within pybombs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-left"&gt;
&lt;h2&gt;What's left ?&lt;/h2&gt;
&lt;p&gt;There are serious to less serious issues I am currently dealing with and hoping
to complete the deliverable as soon as possible. Here are a list of problems I am
currently working on to finish this deliverable:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The app throws a lot of stdout, stderr and other pybombs' specific log messages.
One solution can be to redirect this output to a textedit for better logs.&lt;/li&gt;
&lt;li&gt;Use an intelligent way to cater the elevated privileges issue. Solution is to
use polkit to present the authentication system whenever pybombs' gui requires
elevated privileges. I am still learning on how to use it and a help in any form
in this direction is much welcome (Actually I will be more happy to have someone
help me fixing this).&lt;/li&gt;
&lt;li&gt;Refresh the table content once the changes are applied to the packages. Currently,
the app doesn't refresh the table content in the main window until and unless it
gets the focus back or sometimes restart. Serious issue, but can be fixed with little
effort.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apart from working on the GUI, I am alos working on fixing the pybomb's backend a bit.
Finally the repository is hosted at &lt;a class="reference external" href="https://www.gitlab.com/NinjaComics/pybombs-qtgui"&gt;gitlab&lt;/a&gt; as mentioned in my previous update.
Also, I am recording some &lt;a class="reference external" href="https://www.youtube.com/watch?v=tN0KIX0YE4w"&gt;screencasts&lt;/a&gt; to mark the progress (explaining GUI is
tough.Duh). Also, I will be updating the progress on blog every Friday, hereafter.
For now, Pip-pip !&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ravi Sharan</dc:creator><pubDate>Fri, 08 Jul 2016 18:51:00 +0530</pubDate><guid isPermaLink="false">tag:ninjacomics.github.io,2016-07-08:radioblogr/2016/07/gsoc_condensed_report.html</guid><category>gsoc</category><category>weekly progress</category><category>coding period</category></item><item><title>[GSoC] Week Two &amp; Three - Experimental PyBOMBS GUI</title><link>http://ninjacomics.github.io/radioblogr/2016/06/gsoc_week2_3.html</link><description>&lt;p&gt;In my last &lt;a class="reference external" href="http://ninjacomics.github.io/radioblogr/2016/05/gsoc_week_one.html"&gt;update&lt;/a&gt; , I had discussed the motivation behind designing the
GUI frontend for the new &lt;a class="reference external" href="https://github.com/gnuradio/pybombs"&gt;Pybombs&lt;/a&gt;. In this week's update, I present an almost
finished GUI for the pybombs (it still lacks an interface to the Pybombs API).
The gui features a wizard, where it prompts for the user to fill in/choose the
prefix and the contents in the main window are displayed according to the chosen
prefix. The OOT Modules are listed out in the main window along with some more
information like the category, a one line description of the package and the
remote repository. There's a Module info dialog from which one can query the module
information and it's dependencies. Like I mentioned in my previous update, I have
borrowed the design idea from &lt;a class="reference external" href="http://www.nongnu.org/synaptic/"&gt;Synaptic&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/manjaro/pamac"&gt;Pamac&lt;/a&gt; package managers, with some
addition of graphics to make it look a bit more orangy.&lt;/p&gt;
&lt;div class="section" id="what-s-left"&gt;
&lt;h2&gt;What's left ?&lt;/h2&gt;
&lt;p&gt;By mid-term evaluatation period, I am looking forward to completely interface the
GUI with the Pybombs API and polish the graphics a bit more. Also, during the
interaction sessions with my mentor, Martin Braun, we have decided to make
the GUI frontend installable from within pybombs, which will look something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pybombs install &amp;lt;pybombs-gui-frontend&amp;gt;
&lt;/pre&gt;
&lt;p&gt;That makes it a small update for this week and here's a small &lt;a class="reference external" href="https://www.youtube.com/watch?v=VVN534cHtm4"&gt;screencast&lt;/a&gt; I have made,
on how the GUI will look like.&lt;/p&gt;
&lt;p&gt;Pip-pip !&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ravi Sharan</dc:creator><pubDate>Sun, 12 Jun 2016 09:51:00 +0530</pubDate><guid isPermaLink="false">tag:ninjacomics.github.io,2016-06-12:radioblogr/2016/06/gsoc_week2_3.html</guid><category>gsoc</category><category>weekly progress</category><category>coding period</category></item><item><title>[GSoC] Week One - Pybombs Frontend &amp; Design Idea</title><link>http://ninjacomics.github.io/radioblogr/2016/05/gsoc_week_one.html</link><description>&lt;p&gt;One week into &lt;a class="reference external" href="https://summerofcode.withgoogle.com/"&gt;GSoC&lt;/a&gt; coding period and I have been working on finalizing the
GUI design for &lt;a class="reference external" href="https://github.com/gnuradio/pybombs"&gt;Pybombs&lt;/a&gt;. While I was writing the proposal for GSoC, I had in
mind a design similar to the &lt;a class="reference external" href="http://www.nongnu.org/synaptic/"&gt;Synaptic&lt;/a&gt; package manager. Synaptic is one of
the popular GUI front-ends for the apt tool and anyone coming from the Debian and
Ubuntu world will more than agree to it.&lt;/p&gt;
&lt;p&gt;Another graphical package manager that picqued my interest is &lt;a class="reference external" href="https://github.com/manjaro/pamac"&gt;Pamac&lt;/a&gt;, a GTK3
based GUI frontend for pacman(The package manager for Arch Linux) and ships with
the Antergos distro. Both Pamac and Synaptic have a table view which lists out
the packages available, followed by a brief description and other information
like version number etc., in the subsequent columns.&lt;/p&gt;
&lt;p&gt;The Pybombs1 appstore had a grid view displaying the OOT Modules with an icon for
each module. Although the UI looked simple, with the lack of proper branding of OOT
Modules, only one thumbnail picture appeared for most of the OOT Modules. The reason
behind choosing the tableview approach mentioned above is to keep the UI simple and
clean, while providing a bit more information on the OOT Modules like the version
number, repository URL, etc., that are available from the recipe files.&lt;/p&gt;
&lt;div class="section" id="progress-and-update-for-next-week"&gt;
&lt;h2&gt;Progress and Update for next Week&lt;/h2&gt;
&lt;p&gt;Currently, all the design and development is being done on Antergos distro and
I am using PyQt5 as the GUI toolkit along with Qt Designer to design most of the UI.
Although most of the design is complete, I am still working on polishing certain areas
of the design. In the next week, I intend to bind the existsing pybombs API with the UI and
come up with a minimalistic frontend for Pybombs. I will post my progress and design files
on the mailing list during next week to get feedback on the design before proceeding with
any changes to the original pybombs repo.&lt;/p&gt;
&lt;p&gt;Pip Pip !&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ravi Sharan</dc:creator><pubDate>Sun, 29 May 2016 14:45:00 +0530</pubDate><guid isPermaLink="false">tag:ninjacomics.github.io,2016-05-29:radioblogr/2016/05/gsoc_week_one.html</guid><category>gsoc</category><category>weekly progress</category><category>coding period</category></item><item><title>[GSoC] Community Bonding Period</title><link>http://ninjacomics.github.io/radioblogr/2016/05/gsoc_cb.html</link><description>&lt;p&gt;The &lt;a class="reference external" href="https://summerofcode.withgoogle.com/"&gt;GSoC&lt;/a&gt; community bonding period comes to an end in few hours from now and
I am all excited and a tad bit nervous that the actual coding period starts
from tomorrow. One good thing about the coding period is I don't have to carry
the burden of my semester work parallelly while I am contributing to Pybombs this
summer. Phew ! I am finally done with this semester's work.&lt;/p&gt;
&lt;p&gt;Coming back to the community bonding period, I haven't really pushed any code
or pulled any requests to the &lt;a class="reference external" href="https://github.com/gnuradio/pybombs"&gt;Pybombs&lt;/a&gt; repo during the pseudo coding period
a.k.a community bonding period, but I now have a fairly decent idea on how
Pybombs is shaping up and what areas I must be looking at during this summer,
thanks to all the conversations that happened over the last one month on Pybombs'
bug tracker.&lt;/p&gt;
&lt;p&gt;Of all the issues raised on the Pybombs' bug tracker, issue &lt;a class="reference external" href="https://github.com/gnuradio/pybombs/issues/314"&gt;#304&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/gnuradio/pybombs/issues/312"&gt;#312&lt;/a&gt;
are of particular interest to me. The first one decides the way pybombs should
run while the second issue (although fixed and merged) is a step towards making
Pybombs build against Python3. Although, I was not successful at running pybombs
normally on a virtual environment supporting Python3, I will test it on a
machine which has Python3 as default, before jumping onto developing the
graphical frontend for pybombs.&lt;/p&gt;
&lt;p&gt;Apart from looking at the Pybombs' code base, I have spent some time on figuring
out the PyQt5 and it's availability on platforms other than Ubuntu. Now only
thing that's left is the actual coding period that starts from tomorrow. Like
always, watch out for more updates on Pybombs in the coming weeks. For now,
Pip pip !&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ravi Sharan</dc:creator><pubDate>Sun, 22 May 2016 11:39:00 +0530</pubDate><guid isPermaLink="false">tag:ninjacomics.github.io,2016-05-22:radioblogr/2016/05/gsoc_cb.html</guid><category>gsoc</category><category>community bonding period</category></item><item><title>Summer -&gt; GSoC.GNU Radio</title><link>http://ninjacomics.github.io/radioblogr/2016/04/gsoc.html</link><description>&lt;p&gt;Happy news alert ! Got selected for this year's &lt;a class="reference external" href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code (GSoC)&lt;/a&gt;
and will be contributing to GNU Radio as a part of it. Meaning, I will be
updating the blog more often this summer - on a weekly basis to be precise.
This is my second attempt at participating in GSoC, and I am glad to be part of
it this year.&lt;/p&gt;
&lt;p&gt;During the GSoC period, I will be working on&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;providing a GUI frontend for &lt;a class="reference external" href="https://github.com/gnuradio/pybombs"&gt;Pybombs&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;add Pybombs support to GNU Radio's embdedded working group and&lt;/li&gt;
&lt;li&gt;finally, improve &lt;a class="reference external" href="http://cgran.org/"&gt;CGRAN&lt;/a&gt;, and provide necessary documentation towards the end
of the program.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a nutshell, my contributions during the program will be to improve the user
experience aspects of the GNU Radio project. If you follow planet GNU Radio's
progress, watch out for some updates on Pybombs and CGRAN soon.&lt;/p&gt;
&lt;p&gt;For now, keeping the post short and simple. Pip-pip !&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ravi Sharan</dc:creator><pubDate>Thu, 28 Apr 2016 16:51:00 +0530</pubDate><guid isPermaLink="false">tag:ninjacomics.github.io,2016-04-28:radioblogr/2016/04/gsoc.html</guid><category>gsoc</category></item><item><title>Custom tracing for CQI info in ns-3 apps</title><link>http://ninjacomics.github.io/radioblogr/2016/03/Tracing.html</link><description>&lt;p&gt;I am updating something on this blog exactly after a year - minus 19 days plus
a leap day. In this post, I will walkthrough the steps required to add a tracesource
to ns-3 applications to acquire the downlink Channel Quality Indicator (CQI)
information sent by each UE attached to the respective eNB in the network.&lt;/p&gt;
&lt;p&gt;A bit about CQI in lte - the eNB receives information from the UE
in the form of CQI (ranging from 0 to 15), according to the perceived downlink
channel at the UE. The higher the CQI, the better the channel is. Thus, based on
the CQI received from the UE, appropriate modulation &amp;amp; coding scheme (MCS) is used
to serve the UE better. The CQI reporting modes can either be periodic or aperiodic
in time and wideband or subband in frequency, based on the eNB implementation.
Further information on CQI reporting can be found elsewhere on the internet.
For now, let's get to the main part of this log.&lt;/p&gt;
&lt;div class="section" id="custom-tracesource-and-callback-for-cqi"&gt;
&lt;h2&gt;Custom tracesource and Callback for CQI&lt;/h2&gt;
&lt;p&gt;Add the following piece(s) of code in the respective files in your ns-3 source
tree:&lt;/p&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;lte-enb-phy.cc&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;Adding a TraceSource&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddTraceSource&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ReportCqiValues&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="s"&gt;&amp;quot;DL transmission PHY layer CQI statistics.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;MakeTraceSourceAccessor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;LteEnbPhy&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;m_reportCqiTrace&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="s"&gt;&amp;quot;ns3::LteEnbPhy::ReportCqiTracedCallback&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;lte-enb-phy.h&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;Adding a TracedCallback declaration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TracedCallback&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m_reportCqiTrace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The typedef for the callback function signature&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="nf"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ReportCqiTracedCallback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;cellId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;rnti&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-did-we-do-in-the-previous-section"&gt;
&lt;h2&gt;What did we do in the previous section ?&lt;/h2&gt;
&lt;p&gt;In the above section, the &lt;tt class="docutils literal"&gt;AddTraceSource&lt;/tt&gt; provides hooks to the ns-3 application
using the Config system, the &lt;tt class="docutils literal"&gt;TracedCallback&amp;lt; &amp;gt;&lt;/tt&gt; contains trace information about the
CQI and the typedef void &lt;tt class="docutils literal"&gt;(* ReportCqiTraceCallBack)&lt;/tt&gt; provides a callback
mechanism to the tracesource we just created.&lt;/p&gt;
&lt;p&gt;The CQI values from each UE, packed in the form of control messages
appear at three levels in the ns-3's lte stack - PHY, MAC and the Scheduler. We
catch the CQI values at the lowest level of the stack and route it to our application.
Specifically, we are piping the information held in the &lt;a class="reference external" href="https://www.nsnam.org/doxygen/structns3_1_1_cqi_list_element__s.html"&gt;CqiListElements_s&lt;/a&gt; struct
that is later passed onto the MAC and to the Scheduler layer for further decision making.
The &lt;a class="reference external" href="https://www.nsnam.org/doxygen/structns3_1_1_cqi_list_element__s.html"&gt;CqiListElements_s&lt;/a&gt; struct by default contains RNTI and a vector of CQI values,
along with the other elements like CQI type (periodic or otherwise) etc.,
We add the cellId argument to our tracesource to differentiate between the eNBs,
given there are many eNBs in the application.&lt;/p&gt;
&lt;p&gt;The further process of connecting a tracesink to the source, in the application,
is left to the reader. In essence, the tracing mechanism in ns-3 provides a neat
solution to pipe the information that the stack uses during the simulation, without
disrupting the actual simulation.&lt;/p&gt;
&lt;p&gt;Pip-Pip !&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ravi Sharan</dc:creator><pubDate>Thu, 10 Mar 2016 13:37:00 +0530</pubDate><guid isPermaLink="false">tag:ninjacomics.github.io,2016-03-10:radioblogr/2016/03/Tracing.html</guid><category>ns3</category><category>Tracing</category></item><item><title>CGRAN - A new look</title><link>http://ninjacomics.github.io/radioblogr/2015/03/gr-cgran.html</link><description>&lt;p&gt;Recently I have been working on giving Comprehensive GNU Radio Archive Network
(CGRAN) a new look. While the &lt;a class="reference external" href="https://web.archive.org/web/20140829151613/https://www.cgran.org/wiki/Projects"&gt;old CGRAN site&lt;/a&gt; was built using trac wiki pages,
the new one looks more like a standard website, with nitty-gritty details like
gnuradio version dependencies, tags associated with each OOT Module, more info
about OOT module developers, etc., all packed in one place. The site's built
using &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;pelican&lt;/a&gt; static site generator (Hey ! I use pelican for building this blog
as well :D) and uses bootstrap-material-design framework by Fez Vrasta, to style
the site. Design is not just the only attraction to this site - the module page
information is automated and most important of all, the site's tightly copuled
with &lt;a class="reference external" href="http://gnuradio.org/redmine/projects/pybombs/wiki"&gt;PyBOMBS&lt;/a&gt;. Read along to know more !&lt;/p&gt;
&lt;div class="section" id="design-idea"&gt;
&lt;h2&gt;Design Idea&lt;/h2&gt;
&lt;p&gt;First off, the site's built with bits and pieces collected from different sources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/FezVrasta/bootstrap-material-design"&gt;Bootstrap Material Design framework&lt;/a&gt; by Fez Vrasta(with some customization)
to style the site.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bootstrap-table.wenzhixin.net.cn/"&gt;Bootstrap tables plugin&lt;/a&gt; by Wenzhixin, to make life with tables easy(OOT Module
List).&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/joachimneu/pelican-md-metayaml"&gt;Pelican-md-metayaml&lt;/a&gt; plugin to read the YAML metadata and generate Module
pages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, while designing the site, I took a bit of linience in borrowing ideas from
two similar websites - &lt;a class="reference external" href="https://atom.io/"&gt;atom.io&lt;/a&gt; and &lt;a class="reference external" href="http://customelements.io/"&gt;customelements.io&lt;/a&gt;. The front-page looks
similar to the &lt;a class="reference external" href="http://customelements.io/"&gt;customelements.io&lt;/a&gt; with more emphasis on the list of OOT Modules.
Unlike &lt;a class="reference external" href="http://customelements.io/"&gt;customelements.io&lt;/a&gt;, which is a standalone site for collection of various
polymer elemets, CGRAN is a part of the GNU Radio family and it was enough that
we display the condensed top-matter, as all the extra information concerning OOT
Modules is available on GNU Radio wiki. That said, there are relevant links on
the site to connect to the right wiki page :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rule-zero-pybombs-and-cgran"&gt;
&lt;h2&gt;Rule Zero : PyBOMBS and CGRAN&lt;/h2&gt;
&lt;p&gt;Intelligent CGRAN and integrating it with PyBOMBS has been the top priority ever
since PyBOMBS task force came into picture. The idea is to automatically generate
a list of OOT modules available as PyBOMBS recipes and display them on CGRAN.&lt;/p&gt;
&lt;p&gt;What does this mean ?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The OOT Module developer has to write a PyBOMBS recipe,&lt;/li&gt;
&lt;li&gt;Pull a request for the recipe to be accpeted into PyBOMBS repo,&lt;/li&gt;
&lt;li&gt;Fill in the details in the Manifest file created by gr-modtool, in the module
repo,&lt;/li&gt;
&lt;li&gt;Sit back while the CGRAN site collects information about the new module and
generate a new page for it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simple isn't it ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="module-pages-and-manifest"&gt;
&lt;h2&gt;Module Pages and Manifest&lt;/h2&gt;
&lt;p&gt;I always liked the &lt;a class="reference external" href="https://atom.io/"&gt;atom.io&lt;/a&gt;'s way of displaying a detailed information on its
package/theme on a separate page(that way, the user can stay in a place and get
more info about a project). I created the OOT Module pages in a similar fashion,
but &lt;a class="reference external" href="https://atom.io/"&gt;atom.io&lt;/a&gt; uses the package/theme's README to display information on it's project
info page. This doesn't fit the CGRAN model, as few already existing OOT Modules
have license embedded into their README file. Not only does the user have to
scroll down to get past the license information, it looks a bit odd on the
individual pages. So what did we do ?
Enter &lt;a class="reference external" href="https://github.com/n-west/manifests"&gt;Manifest.yaml&lt;/a&gt; (the format's subject to change) !!! The Manifest.yaml
provides few mandatory fields to fill in, along with a description field, where
the OOT Module author can write any information regarding the module, which
he/she thinks will be of best interest to the user.&lt;/p&gt;
&lt;p&gt;Now, why is YAML the preferred file format ?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It is human readable&lt;/li&gt;
&lt;li&gt;Easily readable on github (Assuming the OOT Modules reside on github)&lt;/li&gt;
&lt;li&gt;CGRAN can scrape the necessary information to generate info for Module pages
in markdown format (remember intelligent CGRAN ?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="let-s-talk-logo"&gt;
&lt;h2&gt;Let's talk Logo&lt;/h2&gt;
&lt;p&gt;Finally, let's talk a bit about the logo. The new CGRAN logo is designed to
resemble an ecosystem of OOT Modules built around GNU Radio. &lt;strong&gt;Self-interest-alert-&lt;/strong&gt;
I am a Dragon Ball fan. That's why there are exactly seven circles,(including
the GNU Radio circle) in the logo resembling the seven dragon balls spread across
as a network ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-next"&gt;
&lt;h2&gt;What Next ?&lt;/h2&gt;
&lt;p&gt;While we have come far from a trac based site to an automated site for CGRAN,
more features (like repo stats, to name one) are to be implemented up the sleeve
without posing any overhead to the OOT Module authors.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;P.S The current state of CGRAN could not have been achieved, if not for constant
inputs from Nathan West and other PyBOMBS Task Froce members :)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ravi Sharan</dc:creator><pubDate>Sun, 29 Mar 2015 20:17:00 +0530</pubDate><guid isPermaLink="false">tag:ninjacomics.github.io,2015-03-29:radioblogr/2015/03/gr-cgran.html</guid><category>CGRAN</category><category>GNU Radio</category></item><item><title>Start the stack with right 3GPP specifications</title><link>http://ninjacomics.github.io/radioblogr/2014/09/Start%20the%20stack%20with%20right%203GPP%20specifications.html</link><description>&lt;p&gt;Well, this is my first official post after starting this blog and after the
rather null &lt;a class="reference external" href="http://ninjacomics.github.io/radioblogr/2014/07/Testpost.html"&gt;Testpost&lt;/a&gt;. So here are few tips on starting to get to the right
3GPP specifications, irrespective of what standard you want to work on. When I
initially started reading the 3GPP specifications an year ago, I was not sure,
if the one I chose would provide me with the information I needed. Also, I was
really irritated by the fact that each and every line in any specification
pointed to several other specifications (and those pointed to several others.
Gosh ! I felt trapped in a loop of specs), but that's how specifications are
written and we have to deal with them.&lt;/p&gt;
&lt;p&gt;So after going through lot of references provided in articles relevant to my
problem, I ended up choosing the correct set of specs. That's one way of
starting with the hunt for right set of specifications for your requirement.
And this is pretty much how anyone who is interested in continuing their
career in research will follow (atleast that's what I assume).
Once you zero in on which specs to follow, the right place to hit is the
&lt;a class="reference external" href="http://www.3gpp.org/specifications/specification-numbering"&gt;3GPP Specification matrix&lt;/a&gt;. This matrix has all the specs sorted according
to their releases and refers to the respective standards(GSM, 3G, and 4G) with
respective specification series. Each sepecification series addresses different
areas of the stack and you can pick the newest and appropriate documents
suitable for your need.&lt;/p&gt;
&lt;p&gt;While one can plunge into 3GPP Specification matrix directly, it is always a
good practice to spend some time referring the relevant articles/papers and
then come back to the matrix.&lt;/p&gt;
&lt;p&gt;And coming to the heavy reference of specifications inside another
specification, you'll tend to ignore them once you get yourself more involved
into the specifications and hit the right ones automatically once you
understand them, which leaves me conveying the fact that, there is really no
workaround or special way to understand 3GPP specifications (fooling around
everyone who read this blog post for tips).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ravi Sharan</dc:creator><pubDate>Tue, 02 Sep 2014 18:09:00 +0530</pubDate><guid isPermaLink="false">tag:ninjacomics.github.io,2014-09-02:radioblogr/2014/09/Start the stack with right 3GPP specifications.html</guid><category>3GPP Specs</category></item><item><title>Testpost</title><link>http://ninjacomics.github.io/radioblogr/2014/07/Testpost.html</link><description>&lt;p&gt;This testpost marks the start of this blog.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ravi Sharan</dc:creator><pubDate>Tue, 01 Jul 2014 11:34:00 +0530</pubDate><guid isPermaLink="false">tag:ninjacomics.github.io,2014-07-01:radioblogr/2014/07/Testpost.html</guid><category>Testpost</category></item></channel></rss>