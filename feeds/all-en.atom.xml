<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ravi Sharan's /radio/bin/io</title><link href="http://ninjacomics.github.io/radioblogr/" rel="alternate"></link><link href="http://feeds.feedburner.com/feeds/all-en.atom.xml" rel="self"></link><id>http://ninjacomics.github.io/radioblogr/</id><updated>2016-05-29T14:45:00+05:30</updated><entry><title>[GSoC] Week One - Pybombs Frontend &amp; Design Idea</title><link href="http://ninjacomics.github.io/radioblogr/2016/05/gsoc_week_one.html" rel="alternate"></link><published>2016-05-29T14:45:00+05:30</published><author><name>Ravi Sharan</name></author><id>tag:ninjacomics.github.io,2016-05-29:radioblogr/2016/05/gsoc_week_one.html</id><summary type="html">&lt;p&gt;One week into &lt;a class="reference external" href="https://summerofcode.withgoogle.com/"&gt;GSoC&lt;/a&gt; coding period and I have been working on finalizing the
GUI design for &lt;a class="reference external" href="https://github.com/gnuradio/pybombs"&gt;Pybombs&lt;/a&gt;. While I was writing the proposal for GSoC, I had in
mind a design similar to the &lt;a class="reference external" href="http://www.nongnu.org/synaptic/"&gt;Synaptic&lt;/a&gt; package manager. Synaptic is one of
the popular GUI front-ends for the apt tool and anyone coming from the Debian and
Ubuntu world will more than agree to it.&lt;/p&gt;
&lt;p&gt;Another graphical package manager that picqued my interest is &lt;a class="reference external" href="https://github.com/manjaro/pamac"&gt;Pamac&lt;/a&gt;, a GTK3
based GUI frontend for pacman(The package manager for Arch Linux) and ships with
the Antergos distro. Both Pamac and Synaptic have a table view which lists out
the packages available, followed by a brief description and other information
like version number etc., in the subsequent columns.&lt;/p&gt;
&lt;p&gt;The Pybombs1 appstore had a grid view displaying the OOT Modules with an icon for
each module. Although the UI looked simple, with the lack of proper branding of OOT
Modules, only one thumbnail picture appeared for most of the OOT Modules. The reason
behind choosing the tableview approach mentioned above is to keep the UI simple and
clean, while providing a bit more information on the OOT Modules like the version
number, repository URL, etc., that are available from the recipe files.&lt;/p&gt;
&lt;div class="section" id="progress-and-update-for-next-week"&gt;
&lt;h2&gt;Progress and Update for next Week&lt;/h2&gt;
&lt;p&gt;Currently, all the design and development is being done on Antergos distro and
I am using PyQt5 as the GUI toolkit along with Qt Designer to design most of the UI.
Although most of the design is complete, I am still working on polishing certain areas
of the design. In the next week, I intend to bind the existsing pybombs API with the UI and
come up with a minimalistic frontend for Pybombs. I will post my progress and design files
on the mailing list during next week to get feedback on the design before proceeding with
any changes to the original pybombs repo.&lt;/p&gt;
&lt;p&gt;Pip Pip !&lt;/p&gt;
&lt;/div&gt;
</summary><category term="gsoc"></category><category term="weekly progress"></category><category term="coding period"></category></entry><entry><title>[GSoC] Community Bonding Period</title><link href="http://ninjacomics.github.io/radioblogr/2016/05/gsoc_cb.html" rel="alternate"></link><published>2016-05-22T11:39:00+05:30</published><author><name>Ravi Sharan</name></author><id>tag:ninjacomics.github.io,2016-05-22:radioblogr/2016/05/gsoc_cb.html</id><summary type="html">&lt;p&gt;The &lt;a class="reference external" href="https://summerofcode.withgoogle.com/"&gt;GSoC&lt;/a&gt; community bonding period comes to an end in few hours from now and
I am all excited and a tad bit nervous that the actual coding period starts
from tomorrow. One good thing about the coding period is I don't have to carry
the burden of my semester work parallelly while I am contributing to Pybombs this
summer. Phew ! I am finally done with this semester's work.&lt;/p&gt;
&lt;p&gt;Coming back to the community bonding period, I haven't really pushed any code
or pulled any requests to the &lt;a class="reference external" href="https://github.com/gnuradio/pybombs"&gt;Pybombs&lt;/a&gt; repo during the pseudo coding period
a.k.a community bonding period, but I now have a fairly decent idea on how
Pybombs is shaping up and what areas I must be looking at during this summer,
thanks to all the conversations that happened over the last one month on Pybombs'
bug tracker.&lt;/p&gt;
&lt;p&gt;Of all the issues raised on the Pybombs' bug tracker, issue &lt;a class="reference external" href="https://github.com/gnuradio/pybombs/issues/314"&gt;#304&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/gnuradio/pybombs/issues/312"&gt;#312&lt;/a&gt;
are of particular interest to me. The first one decides the way pybombs should
run while the second issue (although fixed and merged) is a step towards making
Pybombs build against Python3. Although, I was not successful at running pybombs
normally on a virtual environment supporting Python3, I will test it on a
machine which has Python3 as default, before jumping onto developing the
graphical frontend for pybombs.&lt;/p&gt;
&lt;p&gt;Apart from looking at the Pybombs' code base, I have spent some time on figuring
out the PyQt5 and it's availability on platforms other than Ubuntu. Now only
thing that's left is the actual coding period that starts from tomorrow. Like
always, watch out for more updates on Pybombs in the coming weeks. For now,
Pip pip !&lt;/p&gt;
</summary><category term="gsoc"></category><category term="community bonding period"></category></entry><entry><title>Summer -&gt; GSoC.GNU Radio</title><link href="http://ninjacomics.github.io/radioblogr/2016/04/gsoc.html" rel="alternate"></link><published>2016-04-28T16:51:00+05:30</published><author><name>Ravi Sharan</name></author><id>tag:ninjacomics.github.io,2016-04-28:radioblogr/2016/04/gsoc.html</id><summary type="html">&lt;p&gt;Happy news alert ! Got selected for this year's &lt;a class="reference external" href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code (GSoC)&lt;/a&gt;
and will be contributing to GNU Radio as a part of it. Meaning, I will be
updating the blog more often this summer - on a weekly basis to be precise.
This is my second attempt at participating in GSoC, and I am glad to be part of
it this year.&lt;/p&gt;
&lt;p&gt;During the GSoC period, I will be working on&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;providing a GUI frontend for &lt;a class="reference external" href="https://github.com/gnuradio/pybombs"&gt;Pybombs&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;add Pybombs support to GNU Radio's embdedded working group and&lt;/li&gt;
&lt;li&gt;finally, improve &lt;a class="reference external" href="http://cgran.org/"&gt;CGRAN&lt;/a&gt;, and provide necessary documentation towards the end
of the program.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a nutshell, my contributions during the program will be to improve the user
experience aspects of the GNU Radio project. If you follow planet GNU Radio's
progress, watch out for some updates on Pybombs and CGRAN soon.&lt;/p&gt;
&lt;p&gt;For now, keeping the post short and simple. Pip-pip !&lt;/p&gt;
</summary><category term="gsoc"></category></entry><entry><title>Custom tracing for CQI info in ns-3 apps</title><link href="http://ninjacomics.github.io/radioblogr/2016/03/Tracing.html" rel="alternate"></link><published>2016-03-10T13:37:00+05:30</published><author><name>Ravi Sharan</name></author><id>tag:ninjacomics.github.io,2016-03-10:radioblogr/2016/03/Tracing.html</id><summary type="html">&lt;p&gt;I am updating something on this blog exactly after a year - minus 19 days plus
a leap day. In this post, I will walkthrough the steps required to add a tracesource
to ns-3 applications to acquire the downlink Channel Quality Indicator (CQI)
information sent by each UE attached to the respective eNB in the network.&lt;/p&gt;
&lt;p&gt;A bit about CQI in lte - the eNB receives information from the UE
in the form of CQI (ranging from 0 to 15), according to the perceived downlink
channel at the UE. The higher the CQI, the better the channel is. Thus, based on
the CQI received from the UE, appropriate modulation &amp;amp; coding scheme (MCS) is used
to serve the UE better. The CQI reporting modes can either be periodic or aperiodic
in time and wideband or subband in frequency, based on the eNB implementation.
Further information on CQI reporting can be found elsewhere on the internet.
For now, let's get to the main part of this log.&lt;/p&gt;
&lt;div class="section" id="custom-tracesource-and-callback-for-cqi"&gt;
&lt;h2&gt;Custom tracesource and Callback for CQI&lt;/h2&gt;
&lt;p&gt;Add the following piece(s) of code in the respective files in your ns-3 source
tree:&lt;/p&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;lte-enb-phy.cc&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;Adding a TraceSource&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddTraceSource&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ReportCqiValues&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="s"&gt;&amp;quot;DL transmission PHY layer CQI statistics.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;MakeTraceSourceAccessor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;LteEnbPhy&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;m_reportCqiTrace&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="s"&gt;&amp;quot;ns3::LteEnbPhy::ReportCqiTracedCallback&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;lte-enb-phy.h&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;Adding a TracedCallback declaration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TracedCallback&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m_reportCqiTrace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The typedef for the callback function signature&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="nf"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ReportCqiTracedCallback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;cellId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;rnti&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-did-we-do-in-the-previous-section"&gt;
&lt;h2&gt;What did we do in the previous section ?&lt;/h2&gt;
&lt;p&gt;In the above section, the &lt;tt class="docutils literal"&gt;AddTraceSource&lt;/tt&gt; provides hooks to the ns-3 application
using the Config system, the &lt;tt class="docutils literal"&gt;TracedCallback&amp;lt; &amp;gt;&lt;/tt&gt; contains trace information about the
CQI and the typedef void &lt;tt class="docutils literal"&gt;(* ReportCqiTraceCallBack)&lt;/tt&gt; provides a callback
mechanism to the tracesource we just created.&lt;/p&gt;
&lt;p&gt;The CQI values from each UE, packed in the form of control messages
appear at three levels in the ns-3's lte stack - PHY, MAC and the Scheduler. We
catch the CQI values at the lowest level of the stack and route it to our application.
Specifically, we are piping the information held in the &lt;a class="reference external" href="https://www.nsnam.org/doxygen/structns3_1_1_cqi_list_element__s.html"&gt;CqiListElements_s&lt;/a&gt; struct
that is later passed onto the MAC and to the Scheduler layer for further decision making.
The &lt;a class="reference external" href="https://www.nsnam.org/doxygen/structns3_1_1_cqi_list_element__s.html"&gt;CqiListElements_s&lt;/a&gt; struct by default contains RNTI and a vector of CQI values,
along with the other elements like CQI type (periodic or otherwise) etc.,
We add the cellId argument to our tracesource to differentiate between the eNBs,
given there are many eNBs in the application.&lt;/p&gt;
&lt;p&gt;The further process of connecting a tracesink to the source, in the application,
is left to the reader. In essence, the tracing mechanism in ns-3 provides a neat
solution to pipe the information that the stack uses during the simulation, without
disrupting the actual simulation.&lt;/p&gt;
&lt;p&gt;Pip-Pip !&lt;/p&gt;
&lt;/div&gt;
</summary><category term="ns3"></category><category term="Tracing"></category></entry><entry><title>CGRAN - A new look</title><link href="http://ninjacomics.github.io/radioblogr/2015/03/gr-cgran.html" rel="alternate"></link><published>2015-03-29T20:17:00+05:30</published><author><name>Ravi Sharan</name></author><id>tag:ninjacomics.github.io,2015-03-29:radioblogr/2015/03/gr-cgran.html</id><summary type="html">&lt;p&gt;Recently I have been working on giving Comprehensive GNU Radio Archive Network
(CGRAN) a new look. While the &lt;a class="reference external" href="https://web.archive.org/web/20140829151613/https://www.cgran.org/wiki/Projects"&gt;old CGRAN site&lt;/a&gt; was built using trac wiki pages,
the new one looks more like a standard website, with nitty-gritty details like
gnuradio version dependencies, tags associated with each OOT Module, more info
about OOT module developers, etc., all packed in one place. The site's built
using &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;pelican&lt;/a&gt; static site generator (Hey ! I use pelican for building this blog
as well :D) and uses bootstrap-material-design framework by Fez Vrasta, to style
the site. Design is not just the only attraction to this site - the module page
information is automated and most important of all, the site's tightly copuled
with &lt;a class="reference external" href="http://gnuradio.org/redmine/projects/pybombs/wiki"&gt;PyBOMBS&lt;/a&gt;. Read along to know more !&lt;/p&gt;
&lt;div class="section" id="design-idea"&gt;
&lt;h2&gt;Design Idea&lt;/h2&gt;
&lt;p&gt;First off, the site's built with bits and pieces collected from different sources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/FezVrasta/bootstrap-material-design"&gt;Bootstrap Material Design framework&lt;/a&gt; by Fez Vrasta(with some customization)
to style the site.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bootstrap-table.wenzhixin.net.cn/"&gt;Bootstrap tables plugin&lt;/a&gt; by Wenzhixin, to make life with tables easy(OOT Module
List).&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/joachimneu/pelican-md-metayaml"&gt;Pelican-md-metayaml&lt;/a&gt; plugin to read the YAML metadata and generate Module
pages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, while designing the site, I took a bit of linience in borrowing ideas from
two similar websites - &lt;a class="reference external" href="https://atom.io/"&gt;atom.io&lt;/a&gt; and &lt;a class="reference external" href="http://customelements.io/"&gt;customelements.io&lt;/a&gt;. The front-page looks
similar to the &lt;a class="reference external" href="http://customelements.io/"&gt;customelements.io&lt;/a&gt; with more emphasis on the list of OOT Modules.
Unlike &lt;a class="reference external" href="http://customelements.io/"&gt;customelements.io&lt;/a&gt;, which is a standalone site for collection of various
polymer elemets, CGRAN is a part of the GNU Radio family and it was enough that
we display the condensed top-matter, as all the extra information concerning OOT
Modules is available on GNU Radio wiki. That said, there are relevant links on
the site to connect to the right wiki page :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rule-zero-pybombs-and-cgran"&gt;
&lt;h2&gt;Rule Zero : PyBOMBS and CGRAN&lt;/h2&gt;
&lt;p&gt;Intelligent CGRAN and integrating it with PyBOMBS has been the top priority ever
since PyBOMBS task force came into picture. The idea is to automatically generate
a list of OOT modules available as PyBOMBS recipes and display them on CGRAN.&lt;/p&gt;
&lt;p&gt;What does this mean ?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The OOT Module developer has to write a PyBOMBS recipe,&lt;/li&gt;
&lt;li&gt;Pull a request for the recipe to be accpeted into PyBOMBS repo,&lt;/li&gt;
&lt;li&gt;Fill in the details in the Manifest file created by gr-modtool, in the module
repo,&lt;/li&gt;
&lt;li&gt;Sit back while the CGRAN site collects information about the new module and
generate a new page for it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simple isn't it ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="module-pages-and-manifest"&gt;
&lt;h2&gt;Module Pages and Manifest&lt;/h2&gt;
&lt;p&gt;I always liked the &lt;a class="reference external" href="https://atom.io/"&gt;atom.io&lt;/a&gt;'s way of displaying a detailed information on its
package/theme on a separate page(that way, the user can stay in a place and get
more info about a project). I created the OOT Module pages in a similar fashion,
but &lt;a class="reference external" href="https://atom.io/"&gt;atom.io&lt;/a&gt; uses the package/theme's README to display information on it's project
info page. This doesn't fit the CGRAN model, as few already existing OOT Modules
have license embedded into their README file. Not only does the user have to
scroll down to get past the license information, it looks a bit odd on the
individual pages. So what did we do ?
Enter &lt;a class="reference external" href="https://github.com/n-west/manifests"&gt;Manifest.yaml&lt;/a&gt; (the format's subject to change) !!! The Manifest.yaml
provides few mandatory fields to fill in, along with a description field, where
the OOT Module author can write any information regarding the module, which
he/she thinks will be of best interest to the user.&lt;/p&gt;
&lt;p&gt;Now, why is YAML the preferred file format ?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It is human readable&lt;/li&gt;
&lt;li&gt;Easily readable on github (Assuming the OOT Modules reside on github)&lt;/li&gt;
&lt;li&gt;CGRAN can scrape the necessary information to generate info for Module pages
in markdown format (remember intelligent CGRAN ?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="let-s-talk-logo"&gt;
&lt;h2&gt;Let's talk Logo&lt;/h2&gt;
&lt;p&gt;Finally, let's talk a bit about the logo. The new CGRAN logo is designed to
resemble an ecosystem of OOT Modules built around GNU Radio. &lt;strong&gt;Self-interest-alert-&lt;/strong&gt;
I am a Dragon Ball fan. That's why there are exactly seven circles,(including
the GNU Radio circle) in the logo resembling the seven dragon balls spread across
as a network ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-next"&gt;
&lt;h2&gt;What Next ?&lt;/h2&gt;
&lt;p&gt;While we have come far from a trac based site to an automated site for CGRAN,
more features (like repo stats, to name one) are to be implemented up the sleeve
without posing any overhead to the OOT Module authors.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;P.S The current state of CGRAN could not have been achieved, if not for constant
inputs from Nathan West and other PyBOMBS Task Froce members :)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="CGRAN"></category><category term="GNU Radio"></category></entry><entry><title>Start the stack with right 3GPP specifications</title><link href="http://ninjacomics.github.io/radioblogr/2014/09/Start%20the%20stack%20with%20right%203GPP%20specifications.html" rel="alternate"></link><published>2014-09-02T18:09:00+05:30</published><author><name>Ravi Sharan</name></author><id>tag:ninjacomics.github.io,2014-09-02:radioblogr/2014/09/Start the stack with right 3GPP specifications.html</id><summary type="html">&lt;p&gt;Well, this is my first official post after starting this blog and after the
rather null &lt;a class="reference external" href="http://ninjacomics.github.io/radioblogr/2014/07/Testpost.html"&gt;Testpost&lt;/a&gt;. So here are few tips on starting to get to the right
3GPP specifications, irrespective of what standard you want to work on. When I
initially started reading the 3GPP specifications an year ago, I was not sure,
if the one I chose would provide me with the information I needed. Also, I was
really irritated by the fact that each and every line in any specification
pointed to several other specifications (and those pointed to several others.
Gosh ! I felt trapped in a loop of specs), but that's how specifications are
written and we have to deal with them.&lt;/p&gt;
&lt;p&gt;So after going through lot of references provided in articles relevant to my
problem, I ended up choosing the correct set of specs. That's one way of
starting with the hunt for right set of specifications for your requirement.
And this is pretty much how anyone who is interested in continuing their
career in research will follow (atleast that's what I assume).
Once you zero in on which specs to follow, the right place to hit is the
&lt;a class="reference external" href="http://www.3gpp.org/specifications/specification-numbering"&gt;3GPP Specification matrix&lt;/a&gt;. This matrix has all the specs sorted according
to their releases and refers to the respective standards(GSM, 3G, and 4G) with
respective specification series. Each sepecification series addresses different
areas of the stack and you can pick the newest and appropriate documents
suitable for your need.&lt;/p&gt;
&lt;p&gt;While one can plunge into 3GPP Specification matrix directly, it is always a
good practice to spend some time referring the relevant articles/papers and
then come back to the matrix.&lt;/p&gt;
&lt;p&gt;And coming to the heavy reference of specifications inside another
specification, you'll tend to ignore them once you get yourself more involved
into the specifications and hit the right ones automatically once you
understand them, which leaves me conveying the fact that, there is really no
workaround or special way to understand 3GPP specifications (fooling around
everyone who read this blog post for tips).&lt;/p&gt;
</summary><category term="3GPP Specs"></category></entry><entry><title>Testpost</title><link href="http://ninjacomics.github.io/radioblogr/2014/07/Testpost.html" rel="alternate"></link><published>2014-07-01T11:34:00+05:30</published><author><name>Ravi Sharan</name></author><id>tag:ninjacomics.github.io,2014-07-01:radioblogr/2014/07/Testpost.html</id><summary type="html">&lt;p&gt;This testpost marks the start of this blog.&lt;/p&gt;
</summary><category term="Testpost"></category></entry></feed>