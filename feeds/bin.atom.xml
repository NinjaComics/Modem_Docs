<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ravi Sharan's /radio/bin/io</title><link href="http://ninjacomics.github.io/radioblogr/" rel="alternate"></link><link href="http://feeds.feedburner.com/feeds/bin.atom.xml" rel="self"></link><id>http://ninjacomics.github.io/radioblogr/</id><updated>2016-04-28T16:51:00+05:30</updated><entry><title>Summer GSoC GNU Radio</title><link href="http://ninjacomics.github.io/radioblogr/2016/04/gsoc.html" rel="alternate"></link><updated>2016-04-28T16:51:00+05:30</updated><author><name>Ravi Sharan</name></author><id>tag:ninjacomics.github.io/radioblogr,2016-04-28:2016/04/gsoc.html</id><summary type="html">&lt;img alt="" class="align-center" src="http://ninjacomics.github.io/radioblogr/images/banner.png" style="width: 640px; height: 274px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Happy news alert ! Got selected for this year's &lt;a class="reference external" href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code (GSoC)&lt;/a&gt;
and will be contributing to GNU Radio as a part of it. Meaning, I will be
updating the blog more often this summer - on a weekly basis to be precise.
This is my second attempt at participating in GSoC, and I am glad to be part of
it this year.&lt;/p&gt;
&lt;p&gt;During the GSoC period, I will be working on&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;providing a GUI frontend for &lt;a class="reference external" href="https://github.com/gnuradio/pybombs"&gt;Pybombs&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;add Pybombs support to GNU Radio's embdedded working group and&lt;/li&gt;
&lt;li&gt;finally, improve &lt;a class="reference external" href="http://cgran.org/"&gt;CGRAN&lt;/a&gt;, and provide necessary documentation towards the end
of the program.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a nutshell, my contributions during the program will be to improve the user
experience aspects of the GNU Radio project. If you follow planet GNU Radio's
progress, keep a watch on this space for more and more Pybombs and updates.&lt;/p&gt;
&lt;p&gt;For now, keeping the post short and simple. Pip-pip !&lt;/p&gt;
</summary><category term="gsoc"></category></entry><entry><title>Custom tracing for CQI info in ns-3 apps</title><link href="http://ninjacomics.github.io/radioblogr/2016/03/Tracing.html" rel="alternate"></link><updated>2016-03-10T13:37:00+05:30</updated><author><name>Ravi Sharan</name></author><id>tag:ninjacomics.github.io/radioblogr,2016-03-10:2016/03/Tracing.html</id><summary type="html">&lt;p&gt;I am updating something on this blog exactly after a year - minus 19 days plus
a leap day. In this post, I will walkthrough the steps required to add a tracesource
to ns-3 applications to acquire the downlink Channel Quality Indicator (CQI)
information sent by each UE attached to the respective eNB in the network.&lt;/p&gt;
&lt;p&gt;A bit about CQI in lte - the eNB receives information from the UE
in the form of CQI (ranging from 0 to 15), according to the perceived downlink
channel at the UE. The higher the CQI, the better the channel is. Thus, based on
the CQI received from the UE, appropriate modulation &amp;amp; coding scheme (MCS) is used
to serve the UE better. The CQI reporting modes can either be periodic or aperiodic
in time and wideband or subband in frequency, based on the eNB implementation.
Further information on CQI reporting can be found elsewhere on the internet.
For now, let's get to the main part of this log.&lt;/p&gt;
&lt;div class="section" id="custom-tracesource-and-callback-for-cqi"&gt;
&lt;h2&gt;Custom tracesource and Callback for CQI&lt;/h2&gt;
&lt;p&gt;Add the following piece(s) of code in the respective files in your ns-3 source
tree:&lt;/p&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;lte-enb-phy.cc&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;Adding a TraceSource&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddTraceSource&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ReportCqiValues&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="s"&gt;&amp;quot;DL transmission PHY layer CQI statistics.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;MakeTraceSourceAccessor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;LteEnbPhy&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;m_reportCqiTrace&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="s"&gt;&amp;quot;ns3::LteEnbPhy::ReportCqiTracedCallback&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;lte-enb-phy.h&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;Adding a TracedCallback declaration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TracedCallback&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m_reportCqiTrace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The typedef for the callback function signature&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="nf"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ReportCqiTracedCallback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;cellId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;rnti&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-did-we-do-in-the-previous-section"&gt;
&lt;h2&gt;What did we do in the previous section ?&lt;/h2&gt;
&lt;p&gt;In the above section, the &lt;tt class="docutils literal"&gt;AddTraceSource&lt;/tt&gt; provides hooks to the ns-3 application
using the Config system, the &lt;tt class="docutils literal"&gt;TracedCallback&amp;lt; &amp;gt;&lt;/tt&gt; contains trace information about the
CQI and the typedef void &lt;tt class="docutils literal"&gt;(* ReportCqiTraceCallBack)&lt;/tt&gt; provides a callback
mechanism to the tracesource we just created.&lt;/p&gt;
&lt;p&gt;The CQI values from each UE, packed in the form of control messages
appear at three levels in the ns-3's lte stack - PHY, MAC and the Scheduler. We
catch the CQI values at the lowest level of the stack and route it to our application.
Specifically, we are piping the information held in the &lt;a class="reference external" href="https://www.nsnam.org/doxygen/structns3_1_1_cqi_list_element__s.html"&gt;CqiListElements_s&lt;/a&gt; struct
that is later passed onto the MAC and to the Scheduler layer for further decision making.
The &lt;a class="reference external" href="https://www.nsnam.org/doxygen/structns3_1_1_cqi_list_element__s.html"&gt;CqiListElements_s&lt;/a&gt; struct by default contains RNTI and a vector of CQI values,
along with the other elements like CQI type (periodic or otherwise) etc.,
We add the cellId argument to our tracesource to differentiate between the eNBs,
given there are many eNBs in the application.&lt;/p&gt;
&lt;p&gt;The further process of connecting a tracesink to the source, in the application,
is left to the reader. In essence, the tracing mechanism in ns-3 provides a neat
solution to pipe the information that the stack uses during the simulation, without
disrupting the actual simulation.&lt;/p&gt;
&lt;p&gt;Pip-Pip !&lt;/p&gt;
&lt;/div&gt;
</summary><category term="ns3"></category><category term="Tracing"></category></entry><entry><title>CGRAN - A new look</title><link href="http://ninjacomics.github.io/radioblogr/2015/03/gr-cgran.html" rel="alternate"></link><updated>2015-03-29T20:17:00+05:30</updated><author><name>Ravi Sharan</name></author><id>tag:ninjacomics.github.io/radioblogr,2015-03-29:2015/03/gr-cgran.html</id><summary type="html">&lt;p&gt;Recently I have been working on giving Comprehensive GNU Radio Archive Network
(CGRAN) a new look. While the &lt;a class="reference external" href="https://web.archive.org/web/20140829151613/https://www.cgran.org/wiki/Projects"&gt;old CGRAN site&lt;/a&gt; was built using trac wiki pages,
the new one looks more like a standard website, with nitty-gritty details like
gnuradio version dependencies, tags associated with each OOT Module, more info
about OOT module developers, etc., all packed in one place. The site's built
using &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;pelican&lt;/a&gt; static site generator (Hey ! I use pelican for building this blog
as well :D) and uses bootstrap-material-design framework by Fez Vrasta, to style
the site. Design is not just the only attraction to this site - the module page
information is automated and most important of all, the site's tightly copuled
with &lt;a class="reference external" href="http://gnuradio.org/redmine/projects/pybombs/wiki"&gt;PyBOMBS&lt;/a&gt;. Read along to know more !&lt;/p&gt;
&lt;div class="section" id="design-idea"&gt;
&lt;h2&gt;Design Idea&lt;/h2&gt;
&lt;p&gt;First off, the site's built with bits and pieces collected from different sources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/FezVrasta/bootstrap-material-design"&gt;Bootstrap Material Design framework&lt;/a&gt; by Fez Vrasta(with some customization)
to style the site.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bootstrap-table.wenzhixin.net.cn/"&gt;Bootstrap tables plugin&lt;/a&gt; by Wenzhixin, to make life with tables easy(OOT Module
List).&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/joachimneu/pelican-md-metayaml"&gt;Pelican-md-metayaml&lt;/a&gt; plugin to read the YAML metadata and generate Module
pages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, while designing the site, I took a bit of linience in borrowing ideas from
two similar websites - &lt;a class="reference external" href="https://atom.io/"&gt;atom.io&lt;/a&gt; and &lt;a class="reference external" href="http://customelements.io/"&gt;customelements.io&lt;/a&gt;. The front-page looks
similar to the &lt;a class="reference external" href="http://customelements.io/"&gt;customelements.io&lt;/a&gt; with more emphasis on the list of OOT Modules.
Unlike &lt;a class="reference external" href="http://customelements.io/"&gt;customelements.io&lt;/a&gt;, which is a standalone site for collection of various
polymer elemets, CGRAN is a part of the GNU Radio family and it was enough that
we display the condensed top-matter, as all the extra information concerning OOT
Modules is available on GNU Radio wiki. That said, there are relevant links on
the site to connect to the right wiki page :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rule-zero-pybombs-and-cgran"&gt;
&lt;h2&gt;Rule Zero : PyBOMBS and CGRAN&lt;/h2&gt;
&lt;p&gt;Intelligent CGRAN and integrating it with PyBOMBS has been the top priority ever
since PyBOMBS task force came into picture. The idea is to automatically generate
a list of OOT modules available as PyBOMBS recipes and display them on CGRAN.&lt;/p&gt;
&lt;p&gt;What does this mean ?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The OOT Module developer has to write a PyBOMBS recipe,&lt;/li&gt;
&lt;li&gt;Pull a request for the recipe to be accpeted into PyBOMBS repo,&lt;/li&gt;
&lt;li&gt;Fill in the details in the Manifest file created by gr-modtool, in the module
repo,&lt;/li&gt;
&lt;li&gt;Sit back while the CGRAN site collects information about the new module and
generate a new page for it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simple isn't it ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="module-pages-and-manifest"&gt;
&lt;h2&gt;Module Pages and Manifest&lt;/h2&gt;
&lt;p&gt;I always liked the &lt;a class="reference external" href="https://atom.io/"&gt;atom.io&lt;/a&gt;'s way of displaying a detailed information on its
package/theme on a separate page(that way, the user can stay in a place and get
more info about a project). I created the OOT Module pages in a similar fashion,
but &lt;a class="reference external" href="https://atom.io/"&gt;atom.io&lt;/a&gt; uses the package/theme's README to display information on it's project
info page. This doesn't fit the CGRAN model, as few already existing OOT Modules
have license embedded into their README file. Not only does the user have to
scroll down to get past the license information, it looks a bit odd on the
individual pages. So what did we do ?
Enter &lt;a class="reference external" href="https://github.com/n-west/manifests"&gt;Manifest.yaml&lt;/a&gt; (the format's subject to change) !!! The Manifest.yaml
provides few mandatory fields to fill in, along with a description field, where
the OOT Module author can write any information regarding the module, which
he/she thinks will be of best interest to the user.&lt;/p&gt;
&lt;p&gt;Now, why is YAML the preferred file format ?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It is human readable&lt;/li&gt;
&lt;li&gt;Easily readable on github (Assuming the OOT Modules reside on github)&lt;/li&gt;
&lt;li&gt;CGRAN can scrape the necessary information to generate info for Module pages
in markdown format (remember intelligent CGRAN ?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="let-s-talk-logo"&gt;
&lt;h2&gt;Let's talk Logo&lt;/h2&gt;
&lt;p&gt;Finally, let's talk a bit about the logo. The new CGRAN logo is designed to
resemble an ecosystem of OOT Modules built around GNU Radio. &lt;strong&gt;Self-interest-alert-&lt;/strong&gt;
I am a Dragon Ball fan. That's why there are exactly seven circles,(including
the GNU Radio circle) in the logo resembling the seven dragon balls spread across
as a network ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-next"&gt;
&lt;h2&gt;What Next ?&lt;/h2&gt;
&lt;p&gt;While we have come far from a trac based site to an automated site for CGRAN,
more features (like repo stats, to name one) are to be implemented up the sleeve
without posing any overhead to the OOT Module authors.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;P.S The current state of CGRAN could not have been achieved, if not for constant
inputs from Nathan West and other PyBOMBS Task Froce members :)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="CGRAN"></category><category term="GNU Radio"></category></entry></feed>